(* Recommended extension for EBNF syntax highlighting: https://marketplace.visualstudio.com/items?itemName=omkov.vscode-ebnf *)

(*===Common Expressions===*)
(* 
    POSIX character classes defined using unicode categories 
    For POSIX see: https://www.regular-expressions.info/posixbrackets.html
    For unicode categories see: https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt
    For category breakdown see: https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt
*)
UPPER = "\p{Uppercase_Letter}";
LOWER = "\p{Lowercase_Letter}";
ALPHA = "\p{Letter}" | "\p{Letter_Number}";
LETTER = "\p{Letter}";
DIGIT = "\p{Digit}";
HEX_DIGIT = "\p{Hex_Digit}";
ALNUM = ALPHA | DIGIT;
WORD_CHAR = ALNUM | "\p{Connector_Punctuation}";
NEWLINE = "\n" | "\r";
CHARACTER = "\p{Any}";

IDENTIFIER = "\p{XID_Start}", { "\p{XID_Continue}" }; (* Based on Python specification. See: https://docs.python.org/3/reference/lexical_analysis.html#identifiers *)
RENPY_KEYWORD = "as" | "at" | "behind" | "call" | "expression" | "hide" | "if" | "in" | "image" | "init" | "jump" | "menu" | "onlayer" | "python" | "return" | "scene" | "show" | "with" | "while" | "zorder";
OPERATOR = "<>" | "<<" | "<=" | "<" | ">>" | ">=" | ">" | "!=" | "==" | "|" | "^" | "&" | "+" | "-" | "**" | "*" | "//" | "/" | "%" | "~";

(*===Renpy Expressions===*)
AS_EXPRESSION = "as", NAME;
AT_EXPRESSION = "at", SIMPLE_EXPRESSION_LIST;
ONLAYER_EXPRESSION = "onlayer", NAME;
ZORDER_EXPRESSION = "zorder", SIMPLE_EXPRESSION;
BEHIND_EXPRESSION = "behind", NAME, {",", NAME};
IF_EXPRESSION = "if", PYTHON_EXPRESSION;
EXPRESSION_CLAUSE = "expression", SIMPLE_EXPRESSION;
FROM_EXPRESSION = "from", LABEL_NAME;
WITH_EXPRESSION = "with", SIMPLE_EXPRESSION;

(*---Literals---*)
HASH = HEX_DIGIT, { HEX_DIGIT };
INTEGER = [ "+" | "-" ], DIGIT, { DIGIT };
FLOAT = [ "+" | "-" ], ( DIGIT, { DIGIT }, [ ".", { DIGIT } ] | ".", DIGIT, { DIGIT } ), [ ( "e" | "E" ), [ "+" | "-" ], DIGIT, { DIGIT } ];

(*---Entities---*)
WORD = IDENTIFIER;
NAME = WORD - RENPY_KEYWORD;

(* image specifier *)
IMAGE_NAME_COMPONENT_NO_DASH = WORD_CHAR - "-", { WORD_CHAR - "-" };
IMAGE_NAME_COMPONENT = WORD_CHAR, { WORD_CHAR };
IMAGE_NAME = IMAGE_NAME_COMPONENT, { IMAGE_NAME_COMPONENT };
IMAGE_NAME_NO_DASH = IMAGE_NAME_COMPONENT_NO_DASH, { IMAGE_NAME_COMPONENT_NO_DASH };

IMAGE_SPECIFIER_CLAUSE = AS_EXPRESSION | AT_EXPRESSION | ONLAYER_EXPRESSION | ZORDER_EXPRESSION | BEHIND_EXPRESSION;
IMAGE_SPECIFIER = [ EXPRESSION_CLAUSE | IMAGE_NAME ], { IMAGE_SPECIFIER_CLAUSE };


(*===Renpy Statements===*)

SUB_BLOCK = ":", NEWLINE, BLOCK;
ATL_SUB_BLOCK = ":", NEWLINE, ATL_BLOCK;

(* if *)
IF_CLAUSE = IF_EXPRESSION, SUB_BLOCK;
ELIF_CLAUSE = "elif", PYTHON_EXPRESSION, SUB_BLOCK;
ELSE_CLAUSE = "else", SUB_BLOCK;
IF_STATEMENT = IF_CLAUSE, { ELIF_CLAUSE }, [ ELSE_CLAUSE ];

(* while *)
WHILE = "while", PYTHON_EXPRESSION, SUB_BLOCK;

(* pass *)
PASS = "pass", NEWLINE;

(* return *)
RETURN = "return", [ PYTHON_EXPRESSION ], NEWLINE;

(* jump *)
JUMP = "jump", ( EXPRESSION_CLAUSE | LABEL_NAME ), NEWLINE;

(* call *)
CALL = "call", ( EXPRESSION_CLAUSE, [ "pass" ] | LABEL_NAME ), [ ARGUMENTS ], [ FROM_EXPRESSION ], NEWLINE;

(* with *)
WITH = WITH_EXPRESSION, NEWLINE;

(* say *)
SAY_WHO = SIMPLE_EXPRESSION;
SAY_WHAT = TRIPLE_STRING | STRING;
SAY_ATTRIBUTES = "-", {IMAGE_NAME_COMPONENT};
SAY_TEMPORARY_ATTRIBUTES = "@", SAY_ATTRIBUTES;
SAY = [SAY_WHO], [SAY_ATTRIBUTES], [SAY_TEMPORARY_ATTRIBUTES], SAY_WHAT;

(* menu *)
MENU = "menu", [ LABEL_NAME ], [ ARGUMENTS ], MENU_BLOCK;

(* menu block *)
MENUITEM_SET = "set", PYTHON_EXPRESSION, NEWLINE;
MENUITEM_CAPTION = SAY;
MENUITEM_CHOICE = STRING, [ ARGUMENTS ], [ IF_EXPRESSION ], SUB_BLOCK;
MENUITEM_BLOCK_STATEMENT = MENUITEM_SET | WITH | MENUITEM_CAPTION | MENUITEM_CHOICE;
MENU_BLOCK = MENUITEM_BLOCK_STATEMENT, { MENUITEM_BLOCK_STATEMENT };

(* scene *)
SCENE = "scene", [ ONLAYER_EXPRESSION ], [ IMAGE_SPECIFIER, [ WITH ] ], (ATL_SUB_BLOCK | NEWLINE);

(* show *)
SHOW = "show", IMAGE_SPECIFIER, [ WITH ], (ATL_SUB_BLOCK | NEWLINE);
SHOW_LAYER = "show", "layer", NAME, [ AT_EXPRESSION ], (ATL_SUB_BLOCK | NEWLINE);

(* hide *)
HIDE = "hide", IMAGE_SPECIFIER, [ WITH ], NEWLINE;

(* camera *)
CAMERA = "camera", [ NAME | "master" ], [ AT_EXPRESSION ], (ATL_SUB_BLOCK | NEWLINE);

(* image *)
IMAGE = "image", IMAGE_NAME_NO_DASH, (ATL_SUB_BLOCK | "=", PYTHON_EXPRESSION, NEWLINE);

(* style *)
STYLE_PROPERTY_PREFIX_GROUP = ("hover" | "idle" | "insensitive" | "activate"), "_";
STYLE_PROPERTY_PREFIX_SELECTED =  "selected", "_", [ STYLE_PROPERTY_GROUP_PREFIX ];
STYLE_PROPERTY_PREFIX = STYLE_PROPERTY_PREFIX_SELECTED | STYLE_PROPERTY_PREFIX_GROUP;
STYLE_PROPERTY =  "activate_sound" | "adjust_spacing" | "aft_bar" | "aft_gutter" | "align" | "alt" | "altruby_style" | "anchor" | "antialias" | "area" | "background" | "bar_invert"
    | "bar_resizing" | "bar_vertical" | "base_bar" | "black_color" | "bold" | "bottom_bar" | "bottom_gutter" | "bottom_margin" | "bottom_padding" | "box_first_spacing" | "box_layout" | "box_reverse"
    | "box_spacing" | "box_wrap" | "box_wrap_spacing" | "caret" | "child" | "clipping" | "color" | "debug" | "drop_shadow" | "drop_shadow_color" | "enable_hover" | "first_indent"
    | "first_spacing" | "fit_first" | "focus_mask" | "focus_rect" | "font" | "fore_bar" | "fore_gutter" | "foreground" | "hinting" | "hover_sound" | "hyperlink_functions" | "italic"
    | "justify" | "kerning" | "key_events" | "keyboard_focus" | "language" | "layout" | "left_bar" | "left_gutter" | "left_margin" | "left_padding" | "line_leading" | "line_overlap_split"
    | "line_spacing" | "margin" | "maximum" | "min_width" | "minimum" | "minwidth" | "mipmap" | "modal" | "mouse" | "newline_indent" | "offset" | "order_reverse"
    | "outline_scaling" | "outlines" | "padding" | "pos" | "rest_indent" | "right_bar" | "right_gutter" | "right_margin" | "right_padding" | "ruby_style" | "size" | "size_group"
    | "slow_abortable" | "slow_cps" | "slow_cps_multiplier" | "slow_speed" | "sound" | "spacing" | "strikethrough" | "subpixel" | "subtitle_width" | "text_align" | "text_y_fudge" | "textalign"
    | "thumb" | "thumb_offset" | "thumb_shadow" | "time_policy" | "top_bar" | "top_gutter" | "top_margin" | "top_padding" | "underline" | "unscrollable" | "vertical" | "xalign"
    | "xanchor" | "xcenter" | "xfill" | "xfit" | "xmargin" | "xmaximum" | "xminimum" | "xoffset" | "xpadding" | "xpos" | "xsize" | "xspacing"
    | "xysize" | "yalign" | "yanchor" | "ycenter" | "yfill" | "yfit" | "ymargin" | "ymaximum" | "yminimum" | "yoffset" | "ypadding" | "ypos" | "ysize" | "yspacing";
STYLE_PROPERTY_NAME = [STYLE_PROPERTY_PREFIX, "_"], STYLE_PROPERTY;
STYLE_IS_CLAUSE = "is", WORD;
STYLE_CLEAR_CLAUSE = "clear";
STYLE_TAKE_CLAUSE = "take", NAME;
STYLE_DEL_CLAUSE = "del", STYLE_PROPERTY_NAME;
STYLE_VARIANT_CLAUSE = "variant", SIMPLE_EXPRESSION;
STYLE_PROPERTY_CLAUSE = STYLE_PROPERTY_NAME, SIMPLE_EXPRESSION;
STYLE_CLAUSE = IS_CLAUSE | CLEAR_CLAUSE | TAKE_CLAUSE | DEL_CLAUSE | VARIANT_CLAUSE | PROPERTY_CLAUSE;
STYLE_CLAUSE_STATEMENT = STYLE_CLAUSE, NEWLINE;
STYLE = "style", WORD, { STYLE_CLAUSE };
STYLE_SUB_BLOCK = ":", NEWLINE, { STYLE_CLAUSE_STATEMENT };
STYLE = "style", WORD, { STYLE_CLAUSE }, ( STYLE_SUB_BLOCK | NEWLINE );












(* GENERATED *)




UNICODE_ESCAPE = "u", HEX_DIGIT, HEX_DIGIT, HEX_DIGIT, HEX_DIGIT;
ESCAPE_SEQUENCE = "\\", ( CHARACTER | UNICODE_ESCAPE );


DOTTED_NAME = NAME, { ".", NAME };
LABEL_NAME = ["."], NAME, [ ".", NAME ];


STRING = [ "r" ], ( SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING );
SINGLE_QUOTED_STRING = "'", { CHARACTER - "'" | ESCAPE_SEQUENCE }, "'";
DOUBLE_QUOTED_STRING = '"', { CHARACTER - '"' | ESCAPE_SEQUENCE }, '"';
TRIPLE_STRING = [ "r" ], ( TRIPLE_SINGLE_QUOTED_STRING | TRIPLE_DOUBLE_QUOTED_STRING );
TRIPLE_SINGLE_QUOTED_STRING = "'''", { CHARACTER - "'" | ESCAPE_SEQUENCE }, "'''";
TRIPLE_DOUBLE_QUOTED_STRING = '"""', { CHARACTER - '"' | ESCAPE_SEQUENCE }, '"""';

PYTHON_STRING = STRING;
PARENTHESIZED_PYTHON = "(", PYTHON_EXPRESSION, ")";
PYTHON_EXPRESSION = ? any valid Python expression ?;

PARAMETER = NAME, [ "=", PYTHON_EXPRESSION ];
PARAMETERS = "(", [ PARAMETER, { ",", PARAMETER } ], ")";
ARGUMENT = [ NAME, "=" ], PYTHON_EXPRESSION;
ARGUMENTS = "(", [ ARGUMENT, { ",", ARGUMENT } ], ")";

SIMPLE_EXPRESSION = [ OPERATOR ], ( NAME | PYTHON_STRING | PARENTHESIZED_PYTHON ), { ".", ( NAME | PARENTHESIZED_PYTHON ) }, [ OPERATOR ];
SIMPLE_EXPRESSION_LIST = SIMPLE_EXPRESSION, { ",", SIMPLE_EXPRESSION };
EXPRESSION = "expression", SIMPLE_EXPRESSION;





PYTHON = ( "python" | "init python" ), [ "early" ], [ "hide" ], [ "in", DOTTED_NAME ], ":";

LABEL = "label", NAME, [ PARAMETERS ], [ "hide" ], ":";




TRANSFORM = "transform", NAME, [ PARAMETERS ], ":";

SCREEN = "screen", NAME, [ PARAMETERS ], ":";

USER_STATEMENT = "user", NAME, [ ARGUMENTS ];
EARLY_PYTHON = "init python", "early", [ "hide" ], [ "in", DOTTED_NAME ], ":";
TRANSLATE = "translate", NAME, HASH, ":";
TRANSLATE_STRING = "translate", NAME, "strings", ":";
TRANSLATE_BLOCK = "translate", NAME, ( "python" | "style" ), ":";
TRANSLATE_EARLY_BLOCK = "translate early", NAME, ( "python" | "style" ), ":";
END_TRANSLATE = "end translate";



WHILE_STATEMENT= WHILE, BLOCK;
LABEL_STATEMENT= LABEL, BLOCK;
PYTHON_STATEMENT= PYTHON, BLOCK;

BLOCK = { STATEMENT };
STATEMENT = WHILE_STATEMENT | IF_STATEMENT | JUMP | CALL | RETURN | PYTHON_STATEMENT | SCENE | LABEL_STATEMENT | MENU_STATEMENT | PASS | HIDE | SHOW | WITH | TRANSFORM | DEFINE | DEFAULT | SCREEN;




SCREEN = "screen", NAME, [ PARAMETERS ], ":";
SCREEN_PROPERTY = NAME, "=", PYTHON_EXPRESSION;
SCREEN_STYLE_PROPERTY = NAME, "=", PYTHON_EXPRESSION;
SCREEN_STYLE = "style", NAME, { SCREEN_STYLE_PROPERTY }, ":";
SCREEN_USE = "use", NAME, [ ARGUMENTS ];
SCREEN_VBAR = "|";
SCREEN_TAG = "$";
SCREEN_TEXT = PYTHON_STRING;
SCREEN_NL = "%";
SCREEN_SPACE = " ";
SCREEN_INDENT = "\t";
SCREEN_CHILD = SCREEN_PROPERTY | SCREEN_STYLE | SCREEN_USE | SCREEN_VBAR | SCREEN_TAG | SCREEN_TEXT | NEWLINE | SCREEN_NL | SCREEN_SPACE | SCREEN_INDENT;
SCREEN_CHILDREN = { SCREEN_CHILD };

DEFINE = "define", [ INTEGER ], DOTTED_NAME, "=", PYTHON_EXPRESSION;
DEFAULT = "default", [ INTEGER ], DOTTED_NAME, "=", PYTHON_EXPRESSION;

INIT_STATEMENT = "init", [ INTEGER ], STATEMENT;



BLOCK_STATEMENT = WHILE, BLOCK | IF_STATEMENT | MENU, BLOCK | SCREEN;

STATEMENT = JUMP | CALL | RETURN | SHOW | HIDE | SCENE | WITH | MENU_ITEM | CAPTION | SAY_MENU_ITEM | SAY | DEFINE_STATEMENT | DEFAULT_STATEMENT | INIT_STATEMENT | BLOCK_STATEMENT;

BLOCK = STATEMENT, { STATEMENT };

PROGRAM = BLOCK;