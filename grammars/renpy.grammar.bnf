NEWLINE = "\n";
LETTER = "A" | ... | "Z" | "a" | ... | "z" | ? any Unicode letter in the range U+00A0 to U+FFFD ?;
KEYWORD = "as" | "at" | "behind" | "call" | "expression" | "hide" | "if" | "in" | "image" | "init" | "jump" | "menu" | "onlayer" | "python" | "return" | "scene" | "show" | "with" | "while" | "zorder";
CHARACTER = /./;
OPERATOR = "<>" | "<<" | "<=" | "<" | ">>" | ">=" | ">" | "!=" | "==" | "|" | "^" | "&" | "+" | "-" | "**" | "*" | "//" | "/" | "%" | "~";

DIGIT = "0" | "1" | ... | "9";
HEX_DIGIT = DIGIT | "A" | ... | "F" | "a" | ... | "f";
HASH = HEX_DIGIT, { HEX_DIGIT };
INTEGER = [ "+" | "-" ], DIGIT, { DIGIT };
FLOAT = [ "+" | "-" ], ( DIGIT, { DIGIT }, [ ".", { DIGIT } ] | ".", DIGIT, { DIGIT } ), [ ( "e" | "E" ), [ "+" | "-" ], DIGIT, { DIGIT } ];

ALNUM = { LETTER | DIGIT }

UNICODE_ESCAPE = "u", HEX_DIGIT, HEX_DIGIT, HEX_DIGIT, HEX_DIGIT;
ESCAPE_SEQUENCE = "\\", ( CHARACTER | UNICODE_ESCAPE );
WORD = ( LETTER | "_" ), ( ALNUM | "_" );
NAME = WORD - KEYWORD;
DOTTED_NAME = NAME, { ".", NAME };
LABEL_NAME = NAME | ( ".", NAME );
IMAGE_NAME_COMPONENT_NO_DASH = ( ALNUM | "_" ), { ALNUM | "_" };
IMAGE_NAME_COMPONENT = ( ALNUM | "-" | "_" ), { ALNUM | "-" | "_" };

STRING = [ "r" ], ( SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING );
SINGLE_QUOTED_STRING = "'", { CHARACTER - "'" | ESCAPE_SEQUENCE }, "'";
DOUBLE_QUOTED_STRING = '"', { CHARACTER - '"' | ESCAPE_SEQUENCE }, '"';
TRIPLE_STRING = [ "r" ], ( TRIPLE_SINGLE_QUOTED_STRING | TRIPLE_DOUBLE_QUOTED_STRING );
TRIPLE_SINGLE_QUOTED_STRING = "'''", { CHARACTER - "'" | ESCAPE_SEQUENCE }, "'''";
TRIPLE_DOUBLE_QUOTED_STRING = '"""', { CHARACTER - '"' | ESCAPE_SEQUENCE }, '"""';

PYTHON_STRING = STRING;
PARENTHESIZED_PYTHON = "(", PYTHON_EXPRESSION, ")";
PYTHON_EXPRESSION = ? any valid Python expression ?;

PARAMETER = NAME, [ "=", PYTHON_EXPRESSION ];
PARAMETERS = "(", [ PARAMETER, { ",", PARAMETER } ], ")";
ARGUMENT = [ NAME, "=" ], PYTHON_EXPRESSION;
ARGUMENTS = "(", [ ARGUMENT, { ",", ARGUMENT } ], ")";

SIMPLE_EXPRESSION = [ OPERATOR ], ( NAME | PYTHON_STRING | PARENTHESIZED_PYTHON ), { ".", ( NAME | PARENTHESIZED_PYTHON ) }, [ OPERATOR ];
SIMPLE_EXPRESSION_LIST = SIMPLE_EXPRESSION, { ",", SIMPLE_EXPRESSION };
EXPRESSION = "expression", SIMPLE_EXPRESSION;





PYTHON = ( "python" | "init python" ), [ "early" ], [ "hide" ], [ "in", DOTTED_NAME ], ":";

LABEL = "label", NAME, [ PARAMETERS ], [ "hide" ], ":";




TRANSFORM = "transform", NAME, [ PARAMETERS ], ":";

SCREEN = "screen", NAME, [ PARAMETERS ], ":";

USER_STATEMENT = "user", NAME, [ ARGUMENTS ];
EARLY_PYTHON = "init python", "early", [ "hide" ], [ "in", DOTTED_NAME ], ":";
TRANSLATE = "translate", NAME, HASH, ":";
TRANSLATE_STRING = "translate", NAME, "strings", ":";
TRANSLATE_BLOCK = "translate", NAME, ( "python" | "style" ), ":";
TRANSLATE_EARLY_BLOCK = "translate early", NAME, ( "python" | "style" ), ":";
END_TRANSLATE = "end translate";
STYLE = "style", [ INTEGER ], NAME, { STYLE_CLAUSE }, [ ":" ];
STYLE_CLAUSE = ( PARENT_CLAUSE | CLEAR_CLAUSE | TAKE_CLAUSE | DEL_CLAUSE | VARIANT_CLAUSE | PROPERTY_CLAUSE );
PARENT_CLAUSE = "is", NAME;
CLEAR_CLAUSE = "clear";
TAKE_CLAUSE = "take", NAME;
DEL_CLAUSE = "del", NAME;
VARIANT_CLAUSE = "variant", SIMPLE_EXPRESSION;
PROPERTY_CLAUSE = NAME, "=", PYTHON_EXPRESSION;


WHILE_STATEMENT= WHILE, BLOCK;
LABEL_STATEMENT= LABEL, BLOCK;
PYTHON_STATEMENT= PYTHON, BLOCK;

BLOCK = { STATEMENT };
STATEMENT = WHILE_STATEMENT | IF_STATEMENT | JUMP | CALL | RETURN | PYTHON_STATEMENT | SCENE | LABEL_STATEMENT | MENU_STATEMENT | PASS | HIDE | SHOW | WITH | TRANSFORM | DEFINE | DEFAULT | SCREEN;




SCREEN = "screen", NAME, [ PARAMETERS ], ":";
SCREEN_PROPERTY = NAME, "=", PYTHON_EXPRESSION;
SCREEN_STYLE_PROPERTY = NAME, "=", PYTHON_EXPRESSION;
SCREEN_STYLE = "style", NAME, { SCREEN_STYLE_PROPERTY }, ":";
SCREEN_USE = "use", NAME, [ ARGUMENTS ];
SCREEN_VBAR = "|";
SCREEN_TAG = "$";
SCREEN_TEXT = PYTHON_STRING;
SCREEN_NL = "%";
SCREEN_SPACE = " ";
SCREEN_INDENT = "\t";
SCREEN_CHILD = SCREEN_PROPERTY | SCREEN_STYLE | SCREEN_USE | SCREEN_VBAR | SCREEN_TAG | SCREEN_TEXT | NEWLINE | SCREEN_NL | SCREEN_SPACE | SCREEN_INDENT;
SCREEN_CHILDREN = { SCREEN_CHILD };

STYLE_PROPERTY = NAME, "=", PYTHON_EXPRESSION;
STYLE_PARENT_PROPERTY = "is", NAME;
STYLE_TAKE_PROPERTY = "take", NAME;
STYLE_DEL_PROPERTY = "del", NAME;
STYLE_VARIANT_PROPERTY = "variant", PYTHON_EXPRESSION;
STYLE_CLEAR_PROPERTY = "clear";
STYLE_PROPERTIES = STYLE_PARENT_PROPERTY | STYLE_TAKE_PROPERTY | STYLE_DEL_PROPERTY | STYLE_VARIANT_PROPERTY | STYLE_CLEAR_PROPERTY | STYLE_PROPERTY;
STYLE_CLAUSE = STYLE_PROPERTIES, { ",", STYLE_PROPERTIES };
STYLE_BLOCK_CLAUSE = STYLE_CLAUSE, NEWLINE;
STYLE_BLOCK_CLAUSES = { STYLE_BLOCK_CLAUSE };
STYLE_BLOCK = STYLE_BLOCK_CLAUSES;
STYLE_STATEMENT = "style", NAME, { STYLE_CLAUSE }, [ ":" ], [ STYLE_BLOCK ];

DEFINE = "define", [ INTEGER ], DOTTED_NAME, "=", PYTHON_EXPRESSION;
DEFAULT = "default", [ INTEGER ], DOTTED_NAME, "=", PYTHON_EXPRESSION;

INIT_STATEMENT = "init", [ INTEGER ], STATEMENT;



BLOCK_STATEMENT = WHILE, BLOCK | IF_STATEMENT | MENU, BLOCK | SCREEN;

STATEMENT = JUMP | CALL | RETURN | SHOW | HIDE | SCENE | WITH | MENU_ITEM | CAPTION | SAY_MENU_ITEM | SAY | DEFINE_STATEMENT | DEFAULT_STATEMENT | INIT_STATEMENT | BLOCK_STATEMENT;

BLOCK = STATEMENT, { STATEMENT };

PROGRAM = BLOCK;






# Renpy Expressions
# Literals

# image specifier
IMAGE_NAME = IMAGE_NAME_COMPONENT, { IMAGE_NAME_COMPONENT };
IMAGE_NAME_NO_DASH = IMAGE_NAME_COMPONENT_NO_DASH, { IMAGE_NAME_COMPONENT_NO_DASH };

AS_EXPRESSION = "as", NAME;
AT_EXPRESSION = "at", SIMPLE_EXPRESSION_LIST;
ONLAYER_EXPRESSION = "onlayer", NAME;
ZORDER_EXPRESSION = "zorder", SIMPLE_EXPRESSION;
BEHIND_EXPRESSION = "behind", NAME, {",", NAME};
IMAGE_SPECIFIER_CLAUSE = AS_EXPRESSION | AT_EXPRESSION | ONLAYER_EXPRESSION | ZORDER_EXPRESSION | BEHIND_EXPRESSION
IMAGE_SPECIFIER = [EXPRESSION | IMAGE_NAME], { IMAGE_SPECIFIER_CLAUSE };


# Renpy Statements

SUB_BLOCK = ":", NEWLINE, BLOCK;
ATL_SUB_BLOCK = ":", NEWLINE, ATL_BLOCK;

# if
IF_EXPRESSION = "if", PYTHON_EXPRESSION;
IF_CLAUSE = IF_EXPRESSION, SUB_BLOCK;
ELIF_CLAUSE = "elif", PYTHON_EXPRESSION, SUB_BLOCK;
ELSE_CLAUSE = "else", SUB_BLOCK;
IF_STATEMENT = IF_CLAUSE, { ELIF_CLAUSE }, [ ELSE_CLAUSE ];

# while
WHILE = "while", PYTHON_EXPRESSION, SUB_BLOCK;

# pass
PASS = "pass", NEWLINE;

# return
RETURN = "return", [ PYTHON_EXPRESSION ], NEWLINE;

# jump
JUMP = "jump", ( EXPRESSION_CLAUSE | LABEL_NAME ), NEWLINE;

# call
CALL = "call", ( EXPRESSION_CLAUSE, [ "pass" ] | LABEL_NAME ), [ ARGUMENTS ], [ FROM_EXPRESSION ], NEWLINE;

# from
FROM_EXPRESSION = "from", LABEL_NAME;

# with
WITH_EXPRESSION = "with", SIMPLE_EXPRESSION;
WITH = WITH_EXPRESSION, NEWLINE;

# expression
EXPRESSION_CLAUSE = "expression", SIMPLE_EXPRESSION

# say
SAY_WHO = SIMPLE_EXPRESSION;
SAY_WHAT = TRIPLE_STRING | STRING;
SAY_ATTRIBUTES = "-", {IMAGE_NAME_COMPONENT};
SAY_TEMPORARY_ATTRIBUTES = "@", ATTRIBUTES;
SAY = [SAY_WHO], [SAY_ATTRIBUTES], [SAY_TEMPORARY_ATTRIBUTES], SAY_WHAT;

# menu
MENU = "menu", [ LABEL_NAME ], [ ARGUMENTS ], MENU_BLOCK;

# menu block
MENUITEM_SET = "set", PYTHON_EXPRESSION, NEWLINE;
MENUITEM_CAPTION = SAY;
MENUITEM_CHOICE = STRING, [ ARGUMENTS ], [ IF_EXPRESSION ], SUB_BLOCK;
MENUITEM_BLOCK_STATEMENT = MENUITEM_SET | WITH | MENUITEM_CAPTION | MENUITEM_CHOICE;
MENU_BLOCK = MENUITEM_BLOCK_STATEMENT, { MENUITEM_BLOCK_STATEMENT };


# scene
SCENE = "scene", [ ONLAYER_EXPRESSION ], [ IMAGE_SPECIFIER, [ WITH ] ], (ATL_SUB_BLOCK | NEWLINE);

# show
SHOW = "show", IMAGE_SPECIFIER, [ WITH ], (ATL_SUB_BLOCK | NEWLINE);
SHOW_LAYER = "show", "layer", NAME, [ AT_EXPRESSION ], (ATL_SUB_BLOCK | NEWLINE);

# hide
HIDE = "hide", IMAGE_SPECIFIER, [ WITH ], NEWLINE;

# camera
CAMERA = "camera", [ NAME | "master" ], [ AT_EXPRESSION ], (ATL_SUB_BLOCK | NEWLINE);

# image
IMAGE = "image", IMAGE_NAME_NO_DASH, (ATL_SUB_BLOCK | "=", PYTHON_EXPRESSION, NEWLINE);

